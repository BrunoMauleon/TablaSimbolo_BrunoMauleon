package analizadorlexico0;

/* The following code was generated by JFlex 1.4.3 on 08/11/22 13:09 */

 import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.io.BufferedWriter;

class TOKEN {
    TOKEN (int numToken, String token, String lexico, String lexema1, String lexema2){
        this.numToken = numToken;
        this.token = new String(token); 
        this.lexico = lexico;               //token
        this.lexema1=lexema1;
        this.lexema2=lexema2;;
    }
    
    public int numToken;
    public String token;
    public String lexico;
    public String lexema1;
    public String lexema2;

    public String toString(){
        return "Token "+numToken+": "+lexico+" Lexema: "+token+"lexema1:"+lexema1+"lexema2:"+lexema2;
        }
    }


//JFlex 


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 08/11/22 13:09 from the specification file
 * <tt>C:/Users/Bruni/OneDrive/Documentos/NetBeansProjects/AnalizadorLexico0/src/analizadorlexico0/Lexer.flex</tt>
 */
public class metodos {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\4\2\0\1\5\22\0\1\3\1\47\1\61\2\0\1\44"+
    "\2\0\1\54\1\55\1\43\1\45\1\7\1\46\1\41\1\6\1\2"+
    "\1\63\3\2\1\64\4\2\1\52\1\51\1\0\1\42\1\50\2\0"+
    "\1\1\4\1\1\1\7\1\1\1\1\1\1\1\2\1\1\27\1\1"+
    "\1\1\1\1\1\1\3\1\1\56\1\0\1\57\1\0\1\1\1\0"+
    "\1\11\1\17\1\12\1\26\1\15\1\32\1\14\1\34\1\21\1\1"+
    "\1\13\1\20\1\35\1\31\1\25\1\10\1\62\1\30\1\22\1\23"+
    "\1\16\1\24\1\37\1\36\1\33\1\40\1\53\1\0\1\60\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\0\20\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\0\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\0\2\3"+
    "\1\23\21\1\1\24\12\1\1\24\11\1\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\0\17\1\1\24\24\1"+
    "\1\0\26\1\1\0\14\1\1\24\3\1\1\24\1\0"+
    "\11\1\1\0\6\1\2\0\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\33\1\0\1\1\1\0"+
    "\1\33\1\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b"+
    "\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3"+
    "\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\237\0\237\0\237"+
    "\0\237\0\237\0\237\0\237\0\237\0\237\0\u0601\0\u0636"+
    "\0\u013e\0\u013e\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774"+
    "\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c"+
    "\0\u0951\0\u0986\0\u09bb\0\65\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f"+
    "\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37"+
    "\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf"+
    "\0\237\0\u013e\0\237\0\237\0\237\0\237\0\u0e14\0\u0e49"+
    "\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1"+
    "\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199"+
    "\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341"+
    "\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9"+
    "\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691"+
    "\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804\0\u1839"+
    "\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1"+
    "\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u1b89"+
    "\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1341"+
    "\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4"+
    "\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017\0\u204c"+
    "\0\u2081\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a\0\u21bf\0\u21f4"+
    "\0\u2229\0\u225e\0\u2293\0\u22c8\0\u22fd\0\u2332\0\u2367\0\u239c"+
    "\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5\0\u24da\0\u250f\0\u2544"+
    "\0\u2579\0\u25ae\0\u25e3\0\u2618\0\u264d\0\65\0\237";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\2\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\2\2\1\13\1\2\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\2\1\22\1\23\1\24\1\25"+
    "\1\26\4\2\1\27\2\2\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\2\2\3\1\0\2\2"+
    "\5\0\32\2\20\0\3\2\2\0\1\3\60\0\2\3"+
    "\71\0\1\4\60\0\6\7\1\50\1\51\32\7\1\52"+
    "\1\51\27\7\1\4\1\51\33\7\1\51\21\7\1\0"+
    "\2\2\5\0\1\2\1\53\4\2\1\54\11\2\1\55"+
    "\11\2\20\0\3\2\1\0\2\2\5\0\7\2\1\56"+
    "\2\2\1\57\17\2\20\0\3\2\1\0\2\2\5\0"+
    "\1\2\1\60\6\2\1\61\4\2\1\62\6\2\1\63"+
    "\5\2\20\0\3\2\1\0\2\2\5\0\10\2\1\64"+
    "\10\2\1\65\4\2\1\66\3\2\20\0\3\2\1\0"+
    "\2\2\5\0\15\2\1\67\2\2\1\70\2\2\1\71"+
    "\6\2\20\0\3\2\1\0\2\2\5\0\15\2\1\72"+
    "\14\2\20\0\3\2\1\0\2\2\5\0\21\2\1\73"+
    "\1\74\2\2\1\75\4\2\20\0\3\2\1\0\2\2"+
    "\5\0\6\2\1\76\4\2\1\77\7\2\1\100\1\101"+
    "\2\2\1\102\2\2\20\0\3\2\1\0\2\2\5\0"+
    "\20\2\1\103\3\2\1\104\5\2\20\0\3\2\1\0"+
    "\2\2\5\0\15\2\1\105\14\2\20\0\3\2\1\0"+
    "\2\2\5\0\5\2\1\106\7\2\1\107\14\2\20\0"+
    "\3\2\1\0\2\2\5\0\13\2\1\110\7\2\1\111"+
    "\6\2\20\0\3\2\1\0\2\2\5\0\5\2\1\112"+
    "\24\2\20\0\3\2\1\0\2\2\5\0\1\2\1\113"+
    "\3\2\1\114\24\2\20\0\3\2\1\0\2\2\5\0"+
    "\10\2\1\115\1\116\3\2\1\117\14\2\20\0\3\2"+
    "\1\0\2\2\5\0\24\2\1\120\5\2\20\0\3\2"+
    "\42\0\1\121\22\0\6\7\1\4\1\51\32\7\1\122"+
    "\1\51\21\7\42\0\1\123\64\0\1\124\64\0\1\125"+
    "\64\0\1\126\44\0\1\127\42\0\4\50\1\0\60\50"+
    "\1\0\2\2\5\0\2\2\1\130\27\2\20\0\3\2"+
    "\1\0\2\2\5\0\7\2\1\131\22\2\20\0\3\2"+
    "\1\0\2\2\5\0\11\2\1\132\3\2\1\133\14\2"+
    "\20\0\3\2\1\0\2\2\5\0\12\2\1\134\17\2"+
    "\20\0\3\2\1\0\2\2\5\0\12\2\1\135\17\2"+
    "\20\0\3\2\1\0\2\2\5\0\12\2\1\136\1\137"+
    "\16\2\20\0\3\2\1\0\2\2\5\0\1\2\1\140"+
    "\30\2\20\0\3\2\1\0\2\2\5\0\21\2\1\141"+
    "\10\2\20\0\3\2\1\0\2\2\5\0\1\2\1\117"+
    "\30\2\20\0\3\2\1\0\2\2\5\0\12\2\1\136"+
    "\17\2\20\0\3\2\1\0\2\2\5\0\6\2\1\142"+
    "\23\2\20\0\3\2\1\0\2\2\5\0\13\2\1\143"+
    "\16\2\20\0\3\2\1\0\2\2\5\0\15\2\1\144"+
    "\14\2\20\0\3\2\1\0\2\2\5\0\5\2\1\145"+
    "\24\2\20\0\3\2\1\0\2\2\5\0\13\2\1\136"+
    "\16\2\20\0\3\2\1\0\2\2\5\0\21\2\1\146"+
    "\10\2\20\0\3\2\1\0\2\2\5\0\13\2\1\147"+
    "\16\2\20\0\3\2\1\0\2\2\5\0\1\150\31\2"+
    "\20\0\3\2\1\0\2\2\5\0\1\151\31\2\20\0"+
    "\3\2\1\0\2\2\5\0\1\2\1\152\16\2\1\153"+
    "\11\2\20\0\3\2\1\0\2\2\5\0\21\2\1\154"+
    "\10\2\20\0\3\2\1\0\2\2\5\0\15\2\1\155"+
    "\14\2\20\0\3\2\1\0\2\2\5\0\11\2\1\156"+
    "\20\2\20\0\3\2\1\0\2\2\5\0\1\2\1\157"+
    "\21\2\1\74\6\2\20\0\3\2\1\0\2\2\5\0"+
    "\11\2\1\160\6\2\1\161\11\2\20\0\3\2\1\0"+
    "\2\2\5\0\11\2\1\162\20\2\20\0\3\2\1\0"+
    "\2\2\5\0\22\2\1\163\7\2\20\0\3\2\1\0"+
    "\2\2\5\0\6\2\1\164\23\2\20\0\3\2\1\0"+
    "\2\2\5\0\20\2\1\165\11\2\20\0\3\2\1\0"+
    "\2\2\5\0\12\2\1\166\17\2\20\0\3\2\1\0"+
    "\2\2\5\0\13\2\1\167\16\2\20\0\3\2\1\0"+
    "\2\2\5\0\13\2\1\170\16\2\20\0\3\2\1\0"+
    "\2\2\5\0\27\2\1\74\2\2\20\0\3\2\1\0"+
    "\2\2\5\0\15\2\1\171\14\2\20\0\3\2\1\0"+
    "\2\2\5\0\21\2\1\172\10\2\20\0\3\2\1\0"+
    "\2\2\5\0\20\2\1\74\11\2\20\0\3\2\1\0"+
    "\2\2\5\0\11\2\1\173\20\2\20\0\3\2\25\0"+
    "\1\174\40\0\2\2\5\0\3\2\1\175\26\2\20\0"+
    "\3\2\1\0\2\2\5\0\10\2\1\176\21\2\20\0"+
    "\3\2\1\0\2\2\5\0\14\2\1\177\15\2\20\0"+
    "\3\2\1\0\2\2\5\0\13\2\1\200\16\2\20\0"+
    "\3\2\1\0\2\2\5\0\13\2\1\201\16\2\20\0"+
    "\3\2\1\0\2\2\5\0\5\2\1\155\24\2\20\0"+
    "\3\2\1\0\2\2\5\0\5\2\1\74\24\2\20\0"+
    "\3\2\1\0\2\2\5\0\2\2\1\202\27\2\20\0"+
    "\3\2\1\0\2\2\5\0\12\2\1\160\17\2\20\0"+
    "\3\2\1\0\2\2\5\0\13\2\1\203\16\2\20\0"+
    "\3\2\1\0\2\2\5\0\25\2\1\74\4\2\20\0"+
    "\3\2\1\0\2\2\5\0\5\2\1\204\24\2\20\0"+
    "\3\2\1\0\2\2\5\0\10\2\1\205\21\2\20\0"+
    "\3\2\1\0\2\2\5\0\1\2\1\206\30\2\20\0"+
    "\3\2\1\0\2\2\5\0\4\2\1\74\25\2\20\0"+
    "\3\2\1\0\2\2\5\0\5\2\1\207\24\2\20\0"+
    "\3\2\1\0\2\2\5\0\10\2\1\210\4\2\1\155"+
    "\14\2\20\0\3\2\1\0\2\2\5\0\5\2\1\117"+
    "\24\2\20\0\3\2\1\0\2\2\5\0\13\2\1\176"+
    "\16\2\20\0\3\2\1\0\2\2\5\0\11\2\1\211"+
    "\20\2\20\0\3\2\1\0\2\2\5\0\2\2\1\212"+
    "\27\2\20\0\3\2\1\0\2\2\5\0\20\2\1\213"+
    "\11\2\20\0\3\2\1\0\2\2\5\0\13\2\1\137"+
    "\16\2\20\0\3\2\1\0\2\2\5\0\21\2\1\214"+
    "\10\2\20\0\3\2\1\0\2\2\5\0\12\2\1\74"+
    "\17\2\20\0\3\2\1\0\2\2\5\0\15\2\1\215"+
    "\14\2\20\0\3\2\1\0\2\2\5\0\16\2\1\74"+
    "\13\2\20\0\3\2\1\0\2\2\5\0\1\2\1\216"+
    "\30\2\20\0\3\2\1\0\2\2\5\0\7\2\1\173"+
    "\22\2\20\0\3\2\1\0\2\2\5\0\11\2\1\72"+
    "\20\2\20\0\3\2\1\0\2\2\5\0\13\2\1\217"+
    "\16\2\20\0\3\2\1\0\2\2\5\0\6\2\1\220"+
    "\23\2\20\0\3\2\1\0\2\2\5\0\11\2\1\221"+
    "\20\2\20\0\3\2\1\0\2\2\5\0\1\2\1\213"+
    "\30\2\20\0\3\2\1\0\2\2\5\0\1\2\1\222"+
    "\30\2\20\0\3\2\1\0\2\2\5\0\10\2\1\136"+
    "\21\2\20\0\3\2\33\0\1\223\32\0\2\2\5\0"+
    "\1\2\1\224\30\2\20\0\3\2\1\0\2\2\5\0"+
    "\11\2\1\225\20\2\20\0\3\2\1\0\2\2\5\0"+
    "\1\2\1\71\30\2\20\0\3\2\1\0\2\2\5\0"+
    "\5\2\1\226\24\2\20\0\3\2\1\0\2\2\5\0"+
    "\20\2\1\227\11\2\20\0\3\2\1\0\2\2\5\0"+
    "\24\2\1\74\5\2\20\0\3\2\1\0\2\2\5\0"+
    "\11\2\1\230\20\2\20\0\3\2\1\0\2\2\5\0"+
    "\21\2\1\231\10\2\20\0\3\2\1\0\2\2\5\0"+
    "\5\2\1\232\24\2\20\0\3\2\1\0\2\2\5\0"+
    "\3\2\1\74\26\2\20\0\3\2\1\0\2\2\5\0"+
    "\20\2\1\233\11\2\20\0\3\2\1\0\2\2\5\0"+
    "\5\2\1\234\24\2\20\0\3\2\1\0\2\2\5\0"+
    "\2\2\1\235\27\2\20\0\3\2\1\0\2\2\5\0"+
    "\24\2\1\236\5\2\20\0\3\2\1\0\2\2\5\0"+
    "\13\2\1\74\16\2\20\0\3\2\1\0\2\2\5\0"+
    "\12\2\1\237\17\2\20\0\3\2\1\0\2\2\5\0"+
    "\27\2\1\240\2\2\20\0\3\2\1\0\2\2\5\0"+
    "\6\2\1\241\23\2\20\0\3\2\1\0\2\2\5\0"+
    "\5\2\1\242\24\2\20\0\3\2\1\0\2\2\5\0"+
    "\20\2\1\243\11\2\20\0\3\2\1\0\2\2\5\0"+
    "\14\2\1\136\15\2\20\0\3\2\1\0\2\2\5\0"+
    "\10\2\1\244\21\2\20\0\3\2\3\0\1\245\62\0"+
    "\2\2\5\0\4\2\1\136\25\2\20\0\3\2\1\0"+
    "\2\2\5\0\2\2\1\74\27\2\20\0\3\2\1\0"+
    "\2\2\5\0\2\2\1\246\27\2\20\0\3\2\1\0"+
    "\2\2\5\0\1\2\1\247\30\2\20\0\3\2\1\0"+
    "\2\2\5\0\21\2\1\250\10\2\20\0\3\2\1\0"+
    "\2\2\5\0\16\2\1\160\13\2\20\0\3\2\1\0"+
    "\2\2\5\0\1\2\1\243\30\2\20\0\3\2\1\0"+
    "\2\2\5\0\22\2\1\251\7\2\20\0\3\2\1\0"+
    "\2\2\5\0\25\2\1\252\4\2\20\0\3\2\1\0"+
    "\2\2\5\0\13\2\1\253\16\2\20\0\3\2\1\0"+
    "\2\2\5\0\20\2\1\254\11\2\20\0\3\2\1\0"+
    "\2\2\5\0\11\2\1\252\20\2\20\0\3\2\1\0"+
    "\2\2\5\0\10\2\1\213\21\2\20\0\3\2\1\0"+
    "\2\2\5\0\25\2\1\255\4\2\20\0\3\2\1\0"+
    "\2\2\5\0\21\2\1\74\10\2\20\0\3\2\1\0"+
    "\2\2\5\0\10\2\1\256\21\2\20\0\3\2\35\0"+
    "\1\257\30\0\2\2\5\0\13\2\1\260\16\2\20\0"+
    "\3\2\1\0\2\2\5\0\2\2\1\213\27\2\20\0"+
    "\3\2\1\0\2\2\5\0\6\2\1\136\23\2\20\0"+
    "\3\2\1\0\2\2\5\0\1\2\1\261\30\2\20\0"+
    "\3\2\1\0\2\2\5\0\5\2\1\262\24\2\20\0"+
    "\3\2\1\0\2\2\5\0\22\2\1\263\7\2\20\0"+
    "\3\2\1\0\2\2\5\0\15\2\1\264\14\2\20\0"+
    "\3\2\1\0\2\2\5\0\31\2\1\265\20\0\3\2"+
    "\1\0\2\2\5\0\23\2\1\74\6\2\20\0\3\2"+
    "\11\0\1\266\3\0\1\267\50\0\2\2\5\0\5\2"+
    "\1\162\24\2\20\0\3\2\1\0\2\2\5\0\2\2"+
    "\1\136\27\2\20\0\3\2\1\0\2\2\5\0\21\2"+
    "\1\213\10\2\20\0\3\2\1\0\2\2\5\0\1\74"+
    "\31\2\20\0\3\2\1\0\2\2\5\0\21\2\1\270"+
    "\10\2\20\0\3\2\1\0\2\2\5\0\15\2\1\271"+
    "\14\2\20\0\3\2\33\0\1\272\62\0\1\272\34\0"+
    "\2\2\5\0\11\2\1\273\20\2\20\0\3\2\1\0"+
    "\2\2\5\0\6\2\1\274\23\2\20\0\3\2\25\0"+
    "\1\275\40\0\2\2\5\0\30\2\1\260\1\2\20\0"+
    "\3\2\1\0\2\2\5\0\13\2\1\276\16\2\20\0"+
    "\3\2\30\0\1\277\35\0\2\2\5\0\31\2\1\300"+
    "\20\0\3\2\3\0\1\301\62\0\2\2\5\0\1\302"+
    "\31\2\20\0\3\2\62\0\1\303\3\0\2\2\5\0"+
    "\20\2\1\304\11\2\20\0\3\2\16\0\1\305\47\0"+
    "\2\2\5\0\11\2\1\306\20\2\20\0\3\2\15\0"+
    "\1\307\50\0\2\2\5\0\21\2\1\310\10\2\20\0"+
    "\3\2\3\0\1\311\62\0\2\2\5\0\13\2\1\312"+
    "\16\2\20\0\3\2\63\0\1\313\2\0\2\2\5\0"+
    "\10\2\1\314\21\2\20\0\3\2\64\0\1\315\1\0"+
    "\2\2\5\0\21\2\1\316\10\2\20\0\3\2\61\0"+
    "\1\317\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9858];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\2\1\1\0\25\1\1\0\11\11"+
    "\1\0\51\1\1\11\1\1\4\11\1\0\44\1\1\0"+
    "\26\1\1\0\21\1\1\0\11\1\1\0\6\1\2\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int contador;
    private ArrayList<TOKEN> tokens;
    
    //Escribir en txt
    private void writeOutputFile() throws IOException{
        String filename = "file.out";
        BufferedWriter out= new BufferedWriter(
            new FileWriter(filename));
            for(TOKEN t: this.tokens){
                out.write(t + "\n");
                }
                out.close();
                }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public metodos(java.io.Reader in) {
      contador = 0;
    tokens = new ArrayList<TOKEN>();
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public metodos(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        try{
        this.writeOutputFile();
    }catch(IOException ioe){
        ioe.printStackTrace();
        }

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public TOKEN nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPESP","LLD"," ");
    tokens.add(t);
    return t;
          }
        case 29: break;
        case 28: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "MSG","MSG",yytext());
    tokens.add(t);
    return t;
          }
        case 30: break;
        case 20: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "PALRE", yytext()," ");
    tokens.add(t);
    return t;
          }
        case 31: break;
        case 15: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPESP","PDE"," ");
    tokens.add(t);
    return t;
          }
        case 32: break;
        case 21: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPREL","IGU"," ");
    tokens.add(t);
    return t;
          }
        case 33: break;
        case 19: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPASI","DIVA"," ");
    tokens.add(t);
    return t;
          }
        case 34: break;
        case 12: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPESP","DPU"," ");
    tokens.add(t);
    return t;
          }
        case 35: break;
        case 27: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "PALRE", "println" ," ");
    tokens.add(t);
    return t;
          }
        case 36: break;
        case 4: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPARI","DIV"," ");
    tokens.add(t);
    return t;
          }
        case 37: break;
        case 25: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPASI","REA"," ");
    tokens.add(t);
    return t;
          }
        case 38: break;
        case 16: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPESP","COI"," ");
    tokens.add(t);
    return t;
          }
        case 39: break;
        case 13: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPESP","LLI"," ");
    tokens.add(t);
    return t;
          }
        case 40: break;
        case 2: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "NUM", "NUM",yytext());
    tokens.add(t);
    return t;
          }
        case 41: break;
        case 1: 
          { contador++;
    TOKEN t = new TOKEN(contador,yytext(), "ID", "ID",yytext());
    tokens.add(t);
    return t;
          }
        case 42: break;
        case 24: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPASI","SUA"," ");
    tokens.add(t);
    return t;
          }
        case 43: break;
        case 10: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPREL","MAY"," ");
    tokens.add(t);
    return t;
          }
        case 44: break;
        case 23: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPASI","MODA"," ");
    tokens.add(t);
    return t;
          }
        case 45: break;
        case 22: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPASI","MULA"," ");
    tokens.add(t);
    return t;
          }
        case 46: break;
        case 6: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPARI","MUL"," ");
    tokens.add(t);
    return t;
          }
        case 47: break;
        case 9: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPARI","RES"," ");
    tokens.add(t);
    return t;
          }
        case 48: break;
        case 8: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPARI","SUM"," ");
    tokens.add(t);
    return t;
          }
        case 49: break;
        case 5: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPASI","ASI"," ");
    tokens.add(t);
    return t;
          }
        case 50: break;
        case 26: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPREL","DIF"," ");
    tokens.add(t);
    return t;
          }
        case 51: break;
        case 3: 
          { /*Ignore*/
          }
        case 52: break;
        case 7: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPARI","MOD"," ");
    tokens.add(t);
    return t;
          }
        case 53: break;
        case 17: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPESP","COD"," ");
    tokens.add(t);
    return t;
          }
        case 54: break;
        case 14: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPESP","PIZ"," ");
    tokens.add(t);
    return t;
          }
        case 55: break;
        case 11: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPESP","DEL"," ");
    tokens.add(t);
    return t;
          }
        case 56: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
