package analizadorlexico0;

/* The following code was generated by JFlex 1.4.3 on 08/11/22 13:14 */

 import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.io.BufferedWriter;

class TOKEN {
    TOKEN (int numToken, String token, String lexico, String lexema1, String lexema2){
        this.numToken = numToken;
        this.token = new String(token); 
        this.lexico = lexico;               //token
        this.lexema1=lexema1;
        this.lexema2=lexema2;;
    }
    
    public int numToken;
    public String token;
    public String lexico;
    public String lexema1;
    public String lexema2;

    public String toString(){
        return "Token "+numToken+": "+lexico+" Lexema: "+token+"lexema1:"+lexema1+"lexema2:"+lexema2;
        }
    }


//JFlex 


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 08/11/22 13:14 from the specification file
 * <tt>C:/Users/Bruni/OneDrive/Documentos/NetBeansProjects/AnalizadorLexico0/src/analizadorlexico0/Lexer.flex</tt>
 */
public class metodos {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\4\2\0\1\5\22\0\1\3\1\47\1\63\2\0\1\44"+
    "\2\0\1\55\1\56\1\43\1\45\1\7\1\46\1\41\1\6\1\2"+
    "\1\65\3\2\1\66\4\2\1\53\1\52\1\51\1\42\1\50\1\62"+
    "\1\0\1\1\4\1\1\1\7\1\1\1\1\1\1\1\2\1\1\27"+
    "\1\1\1\1\1\1\1\1\3\1\1\57\1\0\1\60\1\0\1\1"+
    "\1\0\1\11\1\17\1\12\1\26\1\15\1\32\1\14\1\34\1\21"+
    "\1\1\1\13\1\20\1\35\1\31\1\25\1\10\1\64\1\30\1\22"+
    "\1\23\1\16\1\24\1\37\1\36\1\33\1\40\1\54\1\0\1\61"+
    "\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\5\20\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\0\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\2\0\2\3\1\26\21\1\1\27\12\1\1\27\11\1"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\0\17\1\1\27\24\1\1\0\26\1\1\0\14\1"+
    "\1\27\3\1\1\27\1\0\11\1\1\0\6\1\2\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\40\1\0\1\1\1\0\1\40\1\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1"+
    "\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672\0\245"+
    "\0\245\0\245\0\245\0\245\0\245\0\245\0\245\0\245"+
    "\0\u06a9\0\u014a\0\u06e0\0\u014a\0\u014a\0\u0717\0\u074e\0\u0785"+
    "\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d"+
    "\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\67\0\u0abe"+
    "\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76"+
    "\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e"+
    "\0\u0e65\0\u0e9c\0\u0ed3\0\245\0\u014a\0\245\0\245\0\245"+
    "\0\245\0\245\0\245\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6"+
    "\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e"+
    "\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356"+
    "\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e"+
    "\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6"+
    "\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u187e"+
    "\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36"+
    "\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u1bee"+
    "\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6"+
    "\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1469\0\u1eb9\0\u1ef0\0\u1f27"+
    "\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u20a8\0\u20df"+
    "\0\u2116\0\u214d\0\u2184\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297"+
    "\0\u22ce\0\u2305\0\u233c\0\u2373\0\u23aa\0\u23e1\0\u2418\0\u244f"+
    "\0\u2486\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u2599\0\u25d0\0\u2607"+
    "\0\u263e\0\u2675\0\u26ac\0\u26e3\0\u271a\0\u2751\0\u2788\0\u27bf"+
    "\0\u27f6\0\u282d\0\67\0\245";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\2\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\2\2\1\13\1\2\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\2\1\22\1\23\1\24\1\25"+
    "\1\26\4\2\1\27\2\2\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\2\2\3"+
    "\1\0\2\2\5\0\32\2\22\0\3\2\2\0\1\3"+
    "\62\0\2\3\73\0\1\4\62\0\6\52\1\53\1\54"+
    "\32\52\1\55\1\54\31\52\1\4\1\54\33\52\1\54"+
    "\23\52\1\0\2\2\5\0\1\2\1\56\4\2\1\57"+
    "\11\2\1\60\11\2\22\0\3\2\1\0\2\2\5\0"+
    "\7\2\1\61\2\2\1\62\17\2\22\0\3\2\1\0"+
    "\2\2\5\0\1\2\1\63\6\2\1\64\4\2\1\65"+
    "\6\2\1\66\5\2\22\0\3\2\1\0\2\2\5\0"+
    "\10\2\1\67\10\2\1\70\4\2\1\71\3\2\22\0"+
    "\3\2\1\0\2\2\5\0\15\2\1\72\2\2\1\73"+
    "\2\2\1\74\6\2\22\0\3\2\1\0\2\2\5\0"+
    "\15\2\1\75\14\2\22\0\3\2\1\0\2\2\5\0"+
    "\21\2\1\76\1\77\2\2\1\100\4\2\22\0\3\2"+
    "\1\0\2\2\5\0\6\2\1\101\4\2\1\102\7\2"+
    "\1\103\1\104\2\2\1\105\2\2\22\0\3\2\1\0"+
    "\2\2\5\0\20\2\1\106\3\2\1\107\5\2\22\0"+
    "\3\2\1\0\2\2\5\0\15\2\1\110\14\2\22\0"+
    "\3\2\1\0\2\2\5\0\5\2\1\111\7\2\1\112"+
    "\14\2\22\0\3\2\1\0\2\2\5\0\13\2\1\113"+
    "\7\2\1\114\6\2\22\0\3\2\1\0\2\2\5\0"+
    "\5\2\1\115\24\2\22\0\3\2\1\0\2\2\5\0"+
    "\1\2\1\116\3\2\1\117\24\2\22\0\3\2\1\0"+
    "\2\2\5\0\10\2\1\120\1\121\3\2\1\122\14\2"+
    "\22\0\3\2\1\0\2\2\5\0\24\2\1\123\5\2"+
    "\22\0\3\2\42\0\1\124\24\0\6\52\1\4\1\54"+
    "\32\52\1\125\1\54\23\52\42\0\1\126\66\0\1\127"+
    "\66\0\1\130\66\0\1\131\66\0\1\132\66\0\1\133"+
    "\46\0\1\134\44\0\4\53\1\0\62\53\1\0\2\2"+
    "\5\0\2\2\1\135\27\2\22\0\3\2\1\0\2\2"+
    "\5\0\7\2\1\136\22\2\22\0\3\2\1\0\2\2"+
    "\5\0\11\2\1\137\3\2\1\140\14\2\22\0\3\2"+
    "\1\0\2\2\5\0\12\2\1\141\17\2\22\0\3\2"+
    "\1\0\2\2\5\0\12\2\1\142\17\2\22\0\3\2"+
    "\1\0\2\2\5\0\12\2\1\143\1\144\16\2\22\0"+
    "\3\2\1\0\2\2\5\0\1\2\1\145\30\2\22\0"+
    "\3\2\1\0\2\2\5\0\21\2\1\146\10\2\22\0"+
    "\3\2\1\0\2\2\5\0\1\2\1\122\30\2\22\0"+
    "\3\2\1\0\2\2\5\0\12\2\1\143\17\2\22\0"+
    "\3\2\1\0\2\2\5\0\6\2\1\147\23\2\22\0"+
    "\3\2\1\0\2\2\5\0\13\2\1\150\16\2\22\0"+
    "\3\2\1\0\2\2\5\0\15\2\1\151\14\2\22\0"+
    "\3\2\1\0\2\2\5\0\5\2\1\152\24\2\22\0"+
    "\3\2\1\0\2\2\5\0\13\2\1\143\16\2\22\0"+
    "\3\2\1\0\2\2\5\0\21\2\1\153\10\2\22\0"+
    "\3\2\1\0\2\2\5\0\13\2\1\154\16\2\22\0"+
    "\3\2\1\0\2\2\5\0\1\155\31\2\22\0\3\2"+
    "\1\0\2\2\5\0\1\156\31\2\22\0\3\2\1\0"+
    "\2\2\5\0\1\2\1\157\16\2\1\160\11\2\22\0"+
    "\3\2\1\0\2\2\5\0\21\2\1\161\10\2\22\0"+
    "\3\2\1\0\2\2\5\0\15\2\1\162\14\2\22\0"+
    "\3\2\1\0\2\2\5\0\11\2\1\163\20\2\22\0"+
    "\3\2\1\0\2\2\5\0\1\2\1\164\21\2\1\77"+
    "\6\2\22\0\3\2\1\0\2\2\5\0\11\2\1\165"+
    "\6\2\1\166\11\2\22\0\3\2\1\0\2\2\5\0"+
    "\11\2\1\167\20\2\22\0\3\2\1\0\2\2\5\0"+
    "\22\2\1\170\7\2\22\0\3\2\1\0\2\2\5\0"+
    "\6\2\1\171\23\2\22\0\3\2\1\0\2\2\5\0"+
    "\20\2\1\172\11\2\22\0\3\2\1\0\2\2\5\0"+
    "\12\2\1\173\17\2\22\0\3\2\1\0\2\2\5\0"+
    "\13\2\1\174\16\2\22\0\3\2\1\0\2\2\5\0"+
    "\13\2\1\175\16\2\22\0\3\2\1\0\2\2\5\0"+
    "\27\2\1\77\2\2\22\0\3\2\1\0\2\2\5\0"+
    "\15\2\1\176\14\2\22\0\3\2\1\0\2\2\5\0"+
    "\21\2\1\177\10\2\22\0\3\2\1\0\2\2\5\0"+
    "\20\2\1\77\11\2\22\0\3\2\1\0\2\2\5\0"+
    "\11\2\1\200\20\2\22\0\3\2\25\0\1\201\42\0"+
    "\2\2\5\0\3\2\1\202\26\2\22\0\3\2\1\0"+
    "\2\2\5\0\10\2\1\203\21\2\22\0\3\2\1\0"+
    "\2\2\5\0\14\2\1\204\15\2\22\0\3\2\1\0"+
    "\2\2\5\0\13\2\1\205\16\2\22\0\3\2\1\0"+
    "\2\2\5\0\13\2\1\206\16\2\22\0\3\2\1\0"+
    "\2\2\5\0\5\2\1\162\24\2\22\0\3\2\1\0"+
    "\2\2\5\0\5\2\1\77\24\2\22\0\3\2\1\0"+
    "\2\2\5\0\2\2\1\207\27\2\22\0\3\2\1\0"+
    "\2\2\5\0\12\2\1\165\17\2\22\0\3\2\1\0"+
    "\2\2\5\0\13\2\1\210\16\2\22\0\3\2\1\0"+
    "\2\2\5\0\25\2\1\77\4\2\22\0\3\2\1\0"+
    "\2\2\5\0\5\2\1\211\24\2\22\0\3\2\1\0"+
    "\2\2\5\0\10\2\1\212\21\2\22\0\3\2\1\0"+
    "\2\2\5\0\1\2\1\213\30\2\22\0\3\2\1\0"+
    "\2\2\5\0\4\2\1\77\25\2\22\0\3\2\1\0"+
    "\2\2\5\0\5\2\1\214\24\2\22\0\3\2\1\0"+
    "\2\2\5\0\10\2\1\215\4\2\1\162\14\2\22\0"+
    "\3\2\1\0\2\2\5\0\5\2\1\122\24\2\22\0"+
    "\3\2\1\0\2\2\5\0\13\2\1\203\16\2\22\0"+
    "\3\2\1\0\2\2\5\0\11\2\1\216\20\2\22\0"+
    "\3\2\1\0\2\2\5\0\2\2\1\217\27\2\22\0"+
    "\3\2\1\0\2\2\5\0\20\2\1\220\11\2\22\0"+
    "\3\2\1\0\2\2\5\0\13\2\1\144\16\2\22\0"+
    "\3\2\1\0\2\2\5\0\21\2\1\221\10\2\22\0"+
    "\3\2\1\0\2\2\5\0\12\2\1\77\17\2\22\0"+
    "\3\2\1\0\2\2\5\0\15\2\1\222\14\2\22\0"+
    "\3\2\1\0\2\2\5\0\16\2\1\77\13\2\22\0"+
    "\3\2\1\0\2\2\5\0\1\2\1\223\30\2\22\0"+
    "\3\2\1\0\2\2\5\0\7\2\1\200\22\2\22\0"+
    "\3\2\1\0\2\2\5\0\11\2\1\75\20\2\22\0"+
    "\3\2\1\0\2\2\5\0\13\2\1\224\16\2\22\0"+
    "\3\2\1\0\2\2\5\0\6\2\1\225\23\2\22\0"+
    "\3\2\1\0\2\2\5\0\11\2\1\226\20\2\22\0"+
    "\3\2\1\0\2\2\5\0\1\2\1\220\30\2\22\0"+
    "\3\2\1\0\2\2\5\0\1\2\1\227\30\2\22\0"+
    "\3\2\1\0\2\2\5\0\10\2\1\143\21\2\22\0"+
    "\3\2\33\0\1\230\34\0\2\2\5\0\1\2\1\231"+
    "\30\2\22\0\3\2\1\0\2\2\5\0\11\2\1\232"+
    "\20\2\22\0\3\2\1\0\2\2\5\0\1\2\1\74"+
    "\30\2\22\0\3\2\1\0\2\2\5\0\5\2\1\233"+
    "\24\2\22\0\3\2\1\0\2\2\5\0\20\2\1\234"+
    "\11\2\22\0\3\2\1\0\2\2\5\0\24\2\1\77"+
    "\5\2\22\0\3\2\1\0\2\2\5\0\11\2\1\235"+
    "\20\2\22\0\3\2\1\0\2\2\5\0\21\2\1\236"+
    "\10\2\22\0\3\2\1\0\2\2\5\0\5\2\1\237"+
    "\24\2\22\0\3\2\1\0\2\2\5\0\3\2\1\77"+
    "\26\2\22\0\3\2\1\0\2\2\5\0\20\2\1\240"+
    "\11\2\22\0\3\2\1\0\2\2\5\0\5\2\1\241"+
    "\24\2\22\0\3\2\1\0\2\2\5\0\2\2\1\242"+
    "\27\2\22\0\3\2\1\0\2\2\5\0\24\2\1\243"+
    "\5\2\22\0\3\2\1\0\2\2\5\0\13\2\1\77"+
    "\16\2\22\0\3\2\1\0\2\2\5\0\12\2\1\244"+
    "\17\2\22\0\3\2\1\0\2\2\5\0\27\2\1\245"+
    "\2\2\22\0\3\2\1\0\2\2\5\0\6\2\1\246"+
    "\23\2\22\0\3\2\1\0\2\2\5\0\5\2\1\247"+
    "\24\2\22\0\3\2\1\0\2\2\5\0\20\2\1\250"+
    "\11\2\22\0\3\2\1\0\2\2\5\0\14\2\1\143"+
    "\15\2\22\0\3\2\1\0\2\2\5\0\10\2\1\251"+
    "\21\2\22\0\3\2\3\0\1\252\64\0\2\2\5\0"+
    "\4\2\1\143\25\2\22\0\3\2\1\0\2\2\5\0"+
    "\2\2\1\77\27\2\22\0\3\2\1\0\2\2\5\0"+
    "\2\2\1\253\27\2\22\0\3\2\1\0\2\2\5\0"+
    "\1\2\1\254\30\2\22\0\3\2\1\0\2\2\5\0"+
    "\21\2\1\255\10\2\22\0\3\2\1\0\2\2\5\0"+
    "\16\2\1\165\13\2\22\0\3\2\1\0\2\2\5\0"+
    "\1\2\1\250\30\2\22\0\3\2\1\0\2\2\5\0"+
    "\22\2\1\256\7\2\22\0\3\2\1\0\2\2\5\0"+
    "\25\2\1\257\4\2\22\0\3\2\1\0\2\2\5\0"+
    "\13\2\1\260\16\2\22\0\3\2\1\0\2\2\5\0"+
    "\20\2\1\261\11\2\22\0\3\2\1\0\2\2\5\0"+
    "\11\2\1\257\20\2\22\0\3\2\1\0\2\2\5\0"+
    "\10\2\1\220\21\2\22\0\3\2\1\0\2\2\5\0"+
    "\25\2\1\262\4\2\22\0\3\2\1\0\2\2\5\0"+
    "\21\2\1\77\10\2\22\0\3\2\1\0\2\2\5\0"+
    "\10\2\1\263\21\2\22\0\3\2\35\0\1\264\32\0"+
    "\2\2\5\0\13\2\1\265\16\2\22\0\3\2\1\0"+
    "\2\2\5\0\2\2\1\220\27\2\22\0\3\2\1\0"+
    "\2\2\5\0\6\2\1\143\23\2\22\0\3\2\1\0"+
    "\2\2\5\0\1\2\1\266\30\2\22\0\3\2\1\0"+
    "\2\2\5\0\5\2\1\267\24\2\22\0\3\2\1\0"+
    "\2\2\5\0\22\2\1\270\7\2\22\0\3\2\1\0"+
    "\2\2\5\0\15\2\1\271\14\2\22\0\3\2\1\0"+
    "\2\2\5\0\31\2\1\272\22\0\3\2\1\0\2\2"+
    "\5\0\23\2\1\77\6\2\22\0\3\2\11\0\1\273"+
    "\3\0\1\274\52\0\2\2\5\0\5\2\1\167\24\2"+
    "\22\0\3\2\1\0\2\2\5\0\2\2\1\143\27\2"+
    "\22\0\3\2\1\0\2\2\5\0\21\2\1\220\10\2"+
    "\22\0\3\2\1\0\2\2\5\0\1\77\31\2\22\0"+
    "\3\2\1\0\2\2\5\0\21\2\1\275\10\2\22\0"+
    "\3\2\1\0\2\2\5\0\15\2\1\276\14\2\22\0"+
    "\3\2\33\0\1\277\64\0\1\277\36\0\2\2\5\0"+
    "\11\2\1\300\20\2\22\0\3\2\1\0\2\2\5\0"+
    "\6\2\1\301\23\2\22\0\3\2\25\0\1\302\42\0"+
    "\2\2\5\0\30\2\1\265\1\2\22\0\3\2\1\0"+
    "\2\2\5\0\13\2\1\303\16\2\22\0\3\2\30\0"+
    "\1\304\37\0\2\2\5\0\31\2\1\305\22\0\3\2"+
    "\3\0\1\306\64\0\2\2\5\0\1\307\31\2\22\0"+
    "\3\2\64\0\1\310\3\0\2\2\5\0\20\2\1\311"+
    "\11\2\22\0\3\2\16\0\1\312\51\0\2\2\5\0"+
    "\11\2\1\313\20\2\22\0\3\2\15\0\1\314\52\0"+
    "\2\2\5\0\21\2\1\315\10\2\22\0\3\2\3\0"+
    "\1\316\64\0\2\2\5\0\13\2\1\317\16\2\22\0"+
    "\3\2\65\0\1\320\2\0\2\2\5\0\10\2\1\321"+
    "\21\2\22\0\3\2\66\0\1\322\1\0\2\2\5\0"+
    "\21\2\1\323\10\2\22\0\3\2\63\0\1\324\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10340];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\30\1\1\0\2\1\11\11\2\0"+
    "\51\1\1\11\1\1\6\11\1\0\44\1\1\0\26\1"+
    "\1\0\21\1\1\0\11\1\1\0\6\1\2\0\2\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[212];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int contador;
    private ArrayList<TOKEN> tokens;
    
    //Escribir en txt
    private void writeOutputFile() throws IOException{
        String filename = "file.out";
        BufferedWriter out= new BufferedWriter(
            new FileWriter(filename));
            for(TOKEN t: this.tokens){
                out.write(t + "\n");
                }
                out.close();
                }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public metodos(java.io.Reader in) {
      contador = 0;
    tokens = new ArrayList<TOKEN>();
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public metodos(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        try{
        this.writeOutputFile();
    }catch(IOException ioe){
        ioe.printStackTrace();
        }

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public TOKEN nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPESP","LLD"," ");
    tokens.add(t);
    return t;
          }
        case 34: break;
        case 33: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "MSG","MSG",yytext());
    tokens.add(t);
    return t;
          }
        case 35: break;
        case 23: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "PALRE", yytext()," ");
    tokens.add(t);
    return t;
          }
        case 36: break;
        case 17: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPESP","PDE"," ");
    tokens.add(t);
    return t;
          }
        case 37: break;
        case 31: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPREL","MEI"," ");
    tokens.add(t);
    return t;
          }
        case 38: break;
        case 24: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPREL","IGU"," ");
    tokens.add(t);
    return t;
          }
        case 39: break;
        case 22: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPASI","DIVA"," ");
    tokens.add(t);
    return t;
          }
        case 40: break;
        case 14: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPESP","DPU"," ");
    tokens.add(t);
    return t;
          }
        case 41: break;
        case 32: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "PALRE", "println" ," ");
    tokens.add(t);
    return t;
          }
        case 42: break;
        case 4: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPARI","DIV"," ");
    tokens.add(t);
    return t;
          }
        case 43: break;
        case 28: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPASI","REA"," ");
    tokens.add(t);
    return t;
          }
        case 44: break;
        case 5: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPESP","COM"," ");
    tokens.add(t);
    return t;
          }
        case 45: break;
        case 18: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPESP","COI"," ");
    tokens.add(t);
    return t;
          }
        case 46: break;
        case 15: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPESP","LLI"," ");
    tokens.add(t);
    return t;
          }
        case 47: break;
        case 30: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPREL","MAI"," ");
    tokens.add(t);
    return t;
          }
        case 48: break;
        case 2: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "NUM", "NUM",yytext());
    tokens.add(t);
    return t;
          }
        case 49: break;
        case 12: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPREL","MEN"," ");
    tokens.add(t);
    return t;
          }
        case 50: break;
        case 1: 
          { contador++;
    TOKEN t = new TOKEN(contador,yytext(), "ID", "ID",yytext());
    tokens.add(t);
    return t;
          }
        case 51: break;
        case 27: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPASI","SUA"," ");
    tokens.add(t);
    return t;
          }
        case 52: break;
        case 11: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPREL","MAY"," ");
    tokens.add(t);
    return t;
          }
        case 53: break;
        case 26: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPASI","MODA"," ");
    tokens.add(t);
    return t;
          }
        case 54: break;
        case 25: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPASI","MULA"," ");
    tokens.add(t);
    return t;
          }
        case 55: break;
        case 21: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPESP","OCO"," ");
    tokens.add(t);
    return t;
          }
        case 56: break;
        case 7: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPARI","MUL"," ");
    tokens.add(t);
    return t;
          }
        case 57: break;
        case 10: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPARI","RES"," ");
    tokens.add(t);
    return t;
          }
        case 58: break;
        case 9: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPARI","SUM"," ");
    tokens.add(t);
    return t;
          }
        case 59: break;
        case 6: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPASI","ASI"," ");
    tokens.add(t);
    return t;
          }
        case 60: break;
        case 29: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPREL","DIF"," ");
    tokens.add(t);
    return t;
          }
        case 61: break;
        case 3: 
          { /*Ignore*/
          }
        case 62: break;
        case 8: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPARI","MOD"," ");
    tokens.add(t);
    return t;
          }
        case 63: break;
        case 19: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPESP","COD"," ");
    tokens.add(t);
    return t;
          }
        case 64: break;
        case 16: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPESP","PIZ"," ");
    tokens.add(t);
    return t;
          }
        case 65: break;
        case 13: 
          { contador++;
    TOKEN t = new TOKEN(contador, yytext(), "OPESP","DEL"," ");
    tokens.add(t);
    return t;
          }
        case 66: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
